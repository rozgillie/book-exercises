# Install and load the "dplyr" library
install.packages("dplyr")
load("dplyr")
library("dplyr")
load("dplyr")
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
select(makes)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
select(vehicles, makes)
# Install and load the "fueleconomy" package
install.packages("devtools")
devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
select(fueleconomy, makes)
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Install devtools package: allows installations from GitHub
install.packages("devtools")
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
select(vehicles, makes)
load("dplyr")
library("dplyr")
load("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
select(vehicles, makes)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Install and load the "fueleconomy" package
install.packages("devtools")
# Install devtools package: allows installations from GitHub
install.packages("devtools")
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
select(vehicles, makes)
load("dplyr")
# Install and load the "dplyr" library
install.packages("dplyr")
library("dplyr")
load("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
select(vehicles, makes)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
select(vehicles, make)
# Filter the data set for vehicles manufactured in 1997
filter(vehicles, year == 1997)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(makes)
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(vehicles, hwy)
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(vehicles_1997, hwy)
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(vehicles_1997, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
mutate(vehicles, average = (hwy + cty)/2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_efficient <- filter(vehicles, drive == 2-Wheel Drive, cty >20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_efficient <- filter(vehicles, drive == "2-Wheel Drive", cty >20)
print(two_wheel_efficient)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst <- select(vehicles, id = min(id))
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
load("nycflight13")
library("nycflights13")
load("nycflight13")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
nrow(flights)
ncol(flights)
colnames(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, time_gained_or_lost = arr_delay - dep_delay)
View(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, time_gained_or_lost = arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_gained_or_lost = arr_delay - dep_delay)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -time_gained_or_lost)
View(flights)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(select(time_gained_or_lost, na.rm = TRUE))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, avg = mean(time_gained_or_lost, na.rm =TRUE))
to_sea < select(to_sea, origin, dest, time_gained_or_lost)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_sea <- filter(flights, dest == "SEA")
to_sea < select(to_sea, origin, dest, time_gained_or_lost)
to_sea <- select(to_sea, origin, dest, time_gained_or_lost)
View(to_sea)
# On average, did flights to SeaTac gain or loose time?
summarize(to_sea, avg = mean(time_gained_or_lost, na.rm =TRUE)
# On average, did flights to SeaTac gain or loose time?
summarize(to_sea, avg_delayed = mean(time_gained_or_lost, na.rm =TRUE)
# On average, did flights to SeaTac gain or loose time?
summarize(to_sea, avg_delayed = mean(time_gained_or_lost, na.rm =TRUE))
